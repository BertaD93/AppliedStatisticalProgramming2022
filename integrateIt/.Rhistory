library(usethis)
use_package("methods")
rep(2,n-1)
rep(2,7)
rep(c(2,4), n-1)
rep(c(2,4), 10)
simpsons <- function(x,f,limits) {
if (is.function(f) == FALSE) {
stop('f must be a function with one parameter (variable)')
}
if (limits[1]<min(x) & max(x)<limits[2]) {
stop('the limits need to be between a and b')
}
n <-length(x)-1
h <- (limits[2] - limits[1])/n
x <- sort(x)
y <- f(x)
s <- (h / 3) * y %*% c(1, rep(c(2,4), n-1), 1)
return(s)
}
#My code is base in this code: https://www.r-bloggers.com/2017/08/the-trapezoidal-rule-of-numerical-integration-in-r/
x <- runif(1000)
#My code is base in this code: https://www.r-bloggers.com/2017/08/the-trapezoidal-rule-of-numerical-integration-in-r/
x <- rnorm(1000)
# limits <- c(0,5)
# trapezoid(1,c(0,5),10)
f <- function(x){
return(x)
}
lim <- c(0,1)
trapezoid <- function(x,f,limits) {
if (is.function(f) == FALSE) {
stop('f must be a function with one parameter (variable)')
}
if (limits[1]<min(x) & max(x)<limits[2]) {
stop('the limits need to be between a and b')
}
n <-length(x)-1
h <- (limits[2] - limits[1])/n
x <- sort(x)
y <- f(x)
fxdx <- (h / 2) * y %*% c(1, rep(2,n-1), 1)
return(fxdx)
}
trapezoid(x,f,lim)
#My code is base in this code: https://www.r-bloggers.com/2017/08/the-trapezoidal-rule-of-numerical-integration-in-r/
x <- runif(1000)
lim <- c(0,1)
trapezoid(x,f,lim)
#My code is base in this code: https://www.r-bloggers.com/2017/08/the-trapezoidal-rule-of-numerical-integration-in-r/
x <- runif(1000)
lim <- c(0,1)
trapezoid(x,f,lim)
#My code is base in this code: https://www.r-bloggers.com/2017/08/the-trapezoidal-rule-of-numerical-integration-in-r/
x <- rnorm(1000)
lim <- c(0,1)
trapezoid(x,f,lim)
#My code is base in this code: https://www.r-bloggers.com/2017/08/the-trapezoidal-rule-of-numerical-integration-in-r/
x <- runif(1000)
lim <- c(0,1)
f <- function(x){
return(x)
}
trapezoid <- function(x,f,limits) {
if (is.function(f) == FALSE) {
stop('f must be a function with one parameter (variable)')
}
if (limits[1]<min(x) & max(x)<limits[2]) {
stop('the limits need to be between a and b')
}
n <-length(x)-1
h <- (limits[2] - limits[1])/n
x <- sort(x)
y <- f(x)
fxdx <- (h / 2) * y %*% c(1, rep(2,n-1), 1)
return(fxdx)
}
trapezoid(x,f,lim)
x
min(x)
max(x)
lim[1]<min(x)
max(x)<lim[2]
trapezoid <- function(x,f,limits) {
if (is.function(f) == FALSE) {
stop('f must be a function with one parameter (variable)')
}
if (limits[1]>min(x) | max(x)>limits[2]) {
stop('the limits need to be between a and b')
}
n <-length(x)-1
h <- (limits[2] - limits[1])/n
x <- sort(x)
y <- f(x)
fxdx <- (h / 2) * y %*% c(1, rep(2,n-1), 1)
return(fxdx)
}
trapezoid(x,f,lim)
simpsons_tita <- function(x,f,limits) {
if (is.function(f) == FALSE) {
stop('f must be a function with one parameter (variable)')
}
if (limits[1]>min(x) | max(x)>limits[2]) {
stop('the limits need to be between a and b')
}
n <-length(x)-1
h <- (limits[2] - limits[1])/n
x <- sort(x)
y <- f(x)
s <- (h / 3) * y %*% c(1, rep(c(2,4), n-1), 1)
return(s)
}
simpsons_lalo <- function(x,f,limits) {
if (is.function(f) == FALSE) {
stop('f must be a function with one parameter (variable)')
}
n <-length(x)-1
h <- (limits[2] - limits[1])/n
y <- f(x)
s <- (h / 3) * y %*% c(1, 2 ^ (1:n %% 2 + 1), 1)
return(s)
}
simpsons_lalo(x,f,lim)
simpsons_tita(x,f,lim)
simpsons_lalo <- function(x,f,limits) {
if (is.function(f) == FALSE) {
stop('f must be a function with one parameter (variable)')
}
n <-length(x)-1
h <- (limits[2] - limits[1])/n
y <- f(x)
s <- (h / 3) * y %*% c(1, 2 ^ (1:(n-1) %% 2 + 1), 1)
return(s)
}
simpsons_lalo(x,f,lim)
simpsons_tita <- function(x,f,limits) {
if (is.function(f) == FALSE) {
stop('f must be a function with one parameter (variable)')
}
if (limits[1]>min(x) | max(x)>limits[2]) {
stop('the limits need to be between a and b')
}
n <-length(x)-1
h <- (limits[2] - limits[1])/n
x <- sort(x)
y <- f(x)
s <- (h / 3) * y %*% c(1, rep(c(2,4), (n/2)-1), 1)
return(s)
}
simpsons_tita(x,f,lim)
rep(c(2,4), (n/2)-1)
rep(c(2,4), (8/2)-1)
2 ^ (1:(9-1) %% 2
2 ^ (1:(9-1) %% 2
2 ^ (1:(9-1) %% 2 +1
c(1, 2 ^ (1:(n-1) %% 2 + 1), 1)
c(1, 2 ^ (1:(9-1) %% 2 + 1), 1)
rep(c(2,4), 10-1)
rep(c(2,4), (10-1/2)
ds
c(1, rep(c(2,4), (10-1/2), 1)
wa
c(1, rep(c(2,4), (10-1/2)), 1)
c(1, rep(c(2,4),(10-1)/2), 1)
simpsons_tita <- function(x,f,limits) {
if (is.function(f) == FALSE) {
stop('f must be a function with one parameter (variable)')
}
if (limits[1]>min(x) | max(x)>limits[2]) {
stop('the limits need to be between a and b')
}
n <-length(x)-1
h <- (limits[2] - limits[1])/n
x <- sort(x)
y <- f(x)
s <- (h / 3) * y %*% c(1, rep(c(2,4),(n-1)/2), 1)
return(s)
}
simpsons_tita(x,f,lim)
