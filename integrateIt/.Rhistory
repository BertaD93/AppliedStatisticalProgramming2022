#' @export
setMethod(
f = "show",
signature = "Trapezoid",
definition = function(object){
print(object@result)
}
)
#' Adding squared values
#'
#' Finds the sum of squared numbers
#'
#' @param x A numeric object
#' @param f A numeric object
#' @param limits A numeric object
#' @param rule A character object
#'
#' @return An object of class Squares containing
#'  \item{squares}{The sum of the squared values}
#'  \item{x}{The first object input}
#'  \item{y}{The second object input}
#' @author Jacob M. Montgomery
#' @note This is a very simple function
#' @examples
#'
#' myX <- c(20, 3)
#' myY <- c(-2, 4.1)
#' addSquares(myX, myY)
#' @export
setGeneric(
name = "integrateIt",
def = function(x, f, limits, rule, ...)
{standardGeneric("integrateIt")}
)
#' @export
setMethod(
f = "integrateIt",
definition = function(x, f, limits, rule, ...){
# Validation of inout
#
n <-length(x)-1
h <- (limits[2] - limits[1])/n
if(rule == "Trapezoid"){
result = (h / 2) * (f %*% c(1, rep(2, n-1), 1))
# result returns
result = result[1,1]
return(new("Trapezoid", x = x, f = f, result=result))
} else if(rule == "Simpson"){
result <- (h / 3) * f %*% c(1, 2 ^ (1:(n-1) %% 2 + 1), 1)
# result returns
result = result[1,1]
return(new("Simpson", x = x, f = f, result=result))
} else {
stop("Rule not sopported!")
}
}
)
integrateIt(x, f, limits, "Simpson")
integrateIt(x, f, limits, "Trapezoid")
x = 1:10
f = 1:10
limits = c(1,10)
integrateIt(x, f, limits, "Simpson")
integrateIt(x, f, limits, "Trapezoid")
mtcars
summary(mtcars)
summary(lm(mpg~disp, data = mtcars))
lm(mpg~disp, data = mtcars)
fun = function(x) x
tolerance = 1
rule = "Trapezoid"
start = 10
h = (limits[2] - limits[1]) / start
h
limits = c(0,10)
h = (limits[2] - limits[1]) / start
h
correct = integrate(fun, limits[1], limits[2])
correct
View(correct)
correct = integrate(fun, limits[1], limits[2])$value
correct
limits = c(1,10)
step = (limits[2] - limits[1]) / start
correct = integrate(fun, limits[1], limits[2])$value
x = seq(limits[1], limits[2], by = step)
x
limits = c(1,10)
step = (limits[2] - limits[1]) / start
x = seq(limits[1], limits[2], by = step)
x
step
f = fun(x)
f
estimation = integrateIt(x, f, limits, "Trapezoid")
estimation
integral_object = integrateIt(x, f, limits, "Trapezoid")
integral_object
View(integral_object)
integral_estimation = integral_object@result
integral_estimation
error = abs(correct - integral_estimation)
error
correct
integral_estimation
fun = function(x) x
tolerance = 1
rule = "Simpson"
start = 10
limits = c(1,10)
step = (limits[2] - limits[1]) / start
x = seq(limits[1], limits[2], by = step)
f = fun(x)
integral_object = integrateIt(x, f, limits, rule)
integral_estimation = integral_object@result
integral_estimation
sin(1)
fun = function(x) sin(x)
tolerance = 1
rule = "Simpson"
start = 10
limits = c(1,10)
step = (limits[2] - limits[1]) / start
x = seq(limits[1], limits[2], by = step)
f = fun(x)
integral_object = integrateIt(x, f, limits, rule)
integral_estimation = integral_object@result
correct = integrate(fun, limits[1], limits[2])$value
correct
integral_estimation
tolerance = 0.00001
tolerance = 0.001
error = abs(correct - integral_estimation)
error
error < tolerance
error = tolerance
i = 0
while(tolerance > error){
step = (limits[2] - limits[1]) / (start + 0)
x = seq(limits[1], limits[2], by = step)
f = fun(x)
integral_object = integrateIt(x, f, limits, rule)
integral_estimation = integral_object@result
correct = integrate(fun, limits[1], limits[2])$value
error = abs(correct - integral_estimation)
i = i + 1
}
i
i
tolerance > error
error = tolerance
tolerance < error
0.1 < 1
0.1 > 1
error = 0
error > tolerance
error = tolerance +1
error > tolerance
# Force to enter first while loop
error = tolerance +1
i = 0
while(error > tolerance){
step = (limits[2] - limits[1]) / (start + 0)
x = seq(limits[1], limits[2], by = step)
f = fun(x)
integral_object = integrateIt(x, f, limits, rule)
integral_estimation = integral_object@result
correct = integrate(fun, limits[1], limits[2])$value
error = abs(correct - integral_estimation)
i = i + 1
}
i
step
# Force to enter first while loop
error = tolerance +1
i = 0
while(error > tolerance){
step = (limits[2] - limits[1]) / (start + i)
x = seq(limits[1], limits[2], by = step)
f = fun(x)
integral_object = integrateIt(x, f, limits, rule)
integral_estimation = integral_object@result
correct = integrate(fun, limits[1], limits[2])$value
error = abs(correct - integral_estimation)
i = i + 1
}
i
fun = function(x) sin(x)
tolerance = 0.001
rule = "Simpson"
start = 10
limits = c(1,10)
###########
# Force to enter first while loop
error = tolerance +1
n = start
while(error > tolerance){
step = (limits[2] - limits[1]) / n
x = seq(limits[1], limits[2], by = step)
f = fun(x)
integral_object = integrateIt(x, f, limits, rule)
integral_estimation = integral_object@result
correct = integrate(fun, limits[1], limits[2])$value
error = abs(correct - integral_estimation)
n = n + 1
}
n
fun = function(x) sin(x)
tolerance = 0.001
rule = "Trapezoid"
start = 10
limits = c(1,10)
###########
# Force to enter first while loop
error = tolerance +1
n = start
while(error > tolerance){
step = (limits[2] - limits[1]) / n
x = seq(limits[1], limits[2], by = step)
f = fun(x)
integral_object = integrateIt(x, f, limits, rule)
integral_estimation = integral_object@result
correct = integrate(fun, limits[1], limits[2])$value
error = abs(correct - integral_estimation)
n = n + 1
}
n
#' Title
#'
#' @slot x numeric.
#' @slot f numeric.
#' @slot result numeric.
#'
#' @return
#' @export
#'
#' @examples
#' new("Simpson", x=1:10, f=1:10, result = 49.5)
setClass(
Class = "Simpson",
representation = representation(
x = "numeric",
f = "numeric",
result = "numeric"
),
prototype = prototype(
x = c(),
f = c(),
result = c()
)
)
#' @export
setValidity(
"Simpson",
function(object){
# Check lenght vectors
if(length(object@x) != length(object@f)) stop("Both lengths of x & f must be equal")
# Check x sort
if(!all(sort(object@x) == object@x)) stop("x vector must be ordered!")
# Check result
if(length(object@result) != 1) stop("Result must be an integer not a vector")
}
)
#' @export
setMethod(
"initialize",
"Simpson",
function(.Object, ...) {
value = callNextMethod()
validObject(value)
return(value)
}
)
#' @export
setMethod(
f = "show",
signature = "Simpson",
definition = function(object){
print(object@result)
}
)
#' Title
#'
#' @slot x numeric.
#' @slot f numeric.
#' @slot result numeric.
#'
#' @return
#' @export
#'
#' @examples
#' new("Trapezoid", x=1:10, f=1:10, result = 49.5)
setClass(
Class = "Trapezoid",
representation = representation(
x = "numeric",
f = "numeric",
result = "numeric"
),
prototype = prototype(
x = c(),
f = c(),
result = c()
)
)
#' @export
setValidity(
"Trapezoid",
function(object){
# Check lenght vectors
if(length(object@x) != length(object@f)) stop("Both lengths of x & f must be equal")
# Check x sort
if(!all(sort(object@x) == object@x)) stop("x vector must be ordered!")
# Check result
if(length(object@result) != 1) stop("Result must be an integer not a vector")
}
)
#' @export
setMethod(
"initialize",
"Trapezoid",
function(.Object, ...) {
value = callNextMethod()
validObject(value)
return(value)
}
)
#' @export
setMethod(
f = "show",
signature = "Trapezoid",
definition = function(object){
print(object@result)
}
)
#' Adding squared values
#'
#' Finds the sum of squared numbers
#'
#' @param x A numeric object
#' @param f A numeric object
#' @param limits A numeric object
#' @param rule A character object
#'
#' @return An object of class Squares containing
#'  \item{squares}{The sum of the squared values}
#'  \item{x}{The first object input}
#'  \item{y}{The second object input}
#' @author Jacob M. Montgomery
#' @note This is a very simple function
#' @examples
#'
#' myX <- c(20, 3)
#' myY <- c(-2, 4.1)
#' addSquares(myX, myY)
#' @export
setGeneric(
name = "integrateIt",
def = function(x, f, limits, rule, ...)
{standardGeneric("integrateIt")}
)
#' @export
setMethod(
f = "integrateIt",
definition = function(x, f, limits, rule, ...){
# Validation of inout
#
n <-length(x)-1
h <- (limits[2] - limits[1])/n
if(rule == "Trapezoid"){
result = (h / 2) * (f %*% c(1, rep(2, n-1), 1))
# result returns
result = result[1,1]
return(new("Trapezoid", x = x, f = f, result=result))
} else if(rule == "Simpson"){
result <- (h / 3) * f %*% c(1, 2 ^ (1:(n-1) %% 2 + 1), 1)
# result returns
result = result[1,1]
return(new("Simpson", x = x, f = f, result=result))
} else {
stop("Rule not sopported!")
}
}
)
#' Title
#'
#' @param fun
#' @param tolerance
#' @param rule
#' @param start
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
setGeneric(name="tolTest",
def=function(fun, tolerance, rule, start, limits,...)
{standardGeneric("tolTest")}
)
#' @export
setMethod(
f="tolTest",
definition=function(fun, tolerance, rule, start, limits, ...){
error = tolerance +1 # Force to enter first while loop
n = start
while(error > tolerance){
step = (limits[2] - limits[1]) / n
x = seq(limits[1], limits[2], by = step)
f = fun(x)
integral_object = integrateIt(x, f, limits, rule)
integral_estimation = integral_object@result
correct = integrate(fun, limits[1], limits[2])$value
error = abs(correct - integral_estimation)
n = n + 1
}
return_list = list(
inputs = list(fun=fun, tolerance=tolerance, rule=rule, start=start, limits=limits),
n = n,
absolute_error = error
)
return(return_list)
}
)
fun = function(x) sin(x)
tolerance = 0.001
rule = "Trapezoid"
start = 10
limits = c(1,10)
tolTest(fun=fun, tolerance=tolerance, rule=rule, start=start, limits=limits)
start = 97
limits = c(1,10)
tolTest(fun=fun, tolerance=tolerance, rule=rule, start=start, limits=limits)
library(devtools)
library(roxygen2)
library(devtools)
library(roxygen2)
setwd() #This will need to be changed to match your directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## This can be run many times as the code is updates
current.code <- as.package("integrateit")
load_all(current.code)
library(devtools)
library(roxygen2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## This can be run many times as the code is updates
current.code <- as.package("integrateit")
load_all(current.code)
document(current.code)
x = 1:10
f = 1:10
limits = c(1,10)
integrateIt(x, f, limits, "Simpson")
integrateIt(x, f, limits, "Trapezoid")
fun = function(x) sin(x)
tolerance = 0.001
rule = "Trapezoid"
start = 10
limits = c(1,10)
tolTest(fun=fun, tolerance=tolerance, rule=rule, start=start, limits=limits)
gc()
library(devtools)
library(roxygen2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## This can be run many times as the code is updates
current.code <- as.package("integrateit")
load_all(current.code)
document(current.code)
x = 1:10
f = 1:10
limits = c(1,10)
integrateIt(x, f, limits, "Simpson")
integrateIt(x, f, limits, "Trapezoid")
fun = function(x) sin(x)
tolerance = 0.001
rule = "Trapezoid"
start = 10
limits = c(1,10)
tolTest(fun=fun, tolerance=tolerance, rule=rule, start=start, limits=limits)
library(devtools)
library(roxygen2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## This can be run many times as the code is updates
current.code <- as.package("integrateit")
load_all(current.code)
document(current.code)
library(devtools)
library(roxygen2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## This can be run many times as the code is updates
current.code <- as.package("integrateit")
load_all(current.code)
document(current.code)
library(devtools)
library(roxygen2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## This can be run many times as the code is updates
current.code <- as.package("integrateit")
load_all(current.code)
document(current.code)
export()
x = 1:10
f = 1:10
limits = c(1,10)
integrateIt(x, f, limits, "Simpson")
integrateIt(x, f, limits, "Trapezoid")
fun = function(x) sin(x)
tolerance = 0.001
rule = "Trapezoid"
start = 10
limits = c(1,10)
tolTest(fun=fun, tolerance=tolerance, rule=rule, start=start, limits=limits)
